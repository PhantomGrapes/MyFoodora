package user;

import java.util.ArrayList;

import item.BasicPlan;
import item.FidelityPlan;
import item.Item;
import item.Meal;
import item.Order;
import item.PointPlan;
import utilites.Coordinate;

/**
 * @author Shoulong
 * Customer of MyFoodora to make an order.
 */

public class Customer extends User{
	
	private String surname;
	private String email;
	private String phoneNumber;
	
	private Coordinate address;
	
	private boolean canBeNotified;
	private boolean isNotifiedByEmail;
	
	private FidelityPlan fidelityPlan;
	
	private Order currentOrder;
	private ArrayList<Order> historyOrders = new ArrayList<Order>();
	
// constructor
	public Customer(){}
	
	public Customer(String _name, String surname, String _username, Coordinate address, String _password) {
		super(_name, _username, _password);
		this.surname = surname;
		this.address = address;
		this.email = "";
		this.phoneNumber = "";
		this.canBeNotified = true;
		this.isNotifiedByEmail = true;
		this.fidelityPlan = new BasicPlan();
		this.currentOrder = new Order();
		this.historyOrders = new ArrayList<Order>();
	}

// getters and setters
	public String getSurname() {
		return surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public boolean isNotifiedByEmail() {
		return isNotifiedByEmail;
	}

	public FidelityPlan getFidelityPlan() {
		return fidelityPlan;
	}

	public Order getCurrentOrder() {
		return currentOrder;
	}

	public void setCurrentOrder(Order currentOrder) {
		this.currentOrder = currentOrder;
	}

	public ArrayList<Order> getHistoryOrders() {
		return historyOrders;
	}

	
	public Coordinate getAddress(){
		return address;
	}

	public void setAddress(Coordinate address) {
		this.address = address;
	}

// Create an order, Pick items, Finish an order
	public void creatOrder(Restaurant restaurant){
		currentOrder = new Order();
		currentOrder.setCustomer(this);
		currentOrder.setRestaurant(restaurant);
		//currentOrder.setDate(Date.);
	}


	public void setNotifiedByEmail(boolean isNotifiedByEmail) {
		this.isNotifiedByEmail = isNotifiedByEmail;
	}

	public boolean isCanBeNotified() {
		return canBeNotified;
	}

	
	public void addToOrder(Item item, int quantity){
		for(int i=0; i<quantity; i++){
			currentOrder.addToItemList(item);
		}
	}
	
	public void addToOrder(Meal meal, int quantity){
		for (int i=0; i<quantity; i++){
			currentOrder.addToMealList(meal);
		}
	}
	
	public void removeFromOrder(Item item)throws Exception{
		if(currentOrder.getItemList().contains(item))
			currentOrder.removeFromItemList(item);
		else
			throw new Exception("There is not this dish in your order");
	}
	
	public void removeFromOrder(Meal meal)throws Exception{
		if(currentOrder.getMealList().contains(meal))
			currentOrder.removeFromMealList(meal);
		else
			throw new Exception("There is not this meal in your order");
	}
	
	public void finishOrder(){
		currentOrder.setFinalPrice(fidelityPlan.calculateFinalPrice(currentOrder));
		// tell myFoodora to find a deliver courier
		// pay for it
		historyOrders.add(currentOrder);
		// new add
		currentOrder.getRestaurant().addOrder(currentOrder);
		ArrayList<Meal> meals=currentOrder.getMealList();
		if(meals != null && meals.size()>0){
			for (Meal meal : meals) {
				meal.setSoldNumber(meal.getSoldNumber()+1);
			}
		}
		
		if(fidelityPlan instanceof PointPlan){
			((PointPlan) fidelityPlan).setFidelityPoint(((PointPlan) fidelityPlan).getFidleityPoint() + (double)((double)currentOrder.getFinalPrice() *0.1));
		}
	}
	
	public void pay(double price){
		
	}
	
// History orders, print all orders made by this customer
	public void getHistoryOrder(){
		if(historyOrders.size() == 0){
			System.out.println("There is no history order.\n");
		}else{
			for(Order order: historyOrders){
				// Not finished
				System.out.println(order.getDate());
			}
		}
	}

// Can be Notified or not, by what method?
	public void setCanBeNotified(boolean canBe){
		canBeNotified = canBe;
	}
	
	public void setBeNotifiedByEmail(boolean byEmail){
		isNotifiedByEmail = byEmail;
	}
	
// Change Fidelity Plan
	public void registerFidelityPlan(FidelityPlan fp){
		fidelityPlan = fp;
	}
	
	public void unregisterFidelityPlan(){
		fidelityPlan = new BasicPlan();
	}
}
