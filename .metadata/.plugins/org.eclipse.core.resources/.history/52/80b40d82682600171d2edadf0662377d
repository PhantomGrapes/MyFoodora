package ui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import command.AddDish2MealCommand;
import command.AddDishRestaurantMenuCommand;
import command.AddItem2OrderCommand;
import command.AssociateCardCommand;
import command.CommandResult;
import command.CreateMealCommand;
import command.CreateOrderCommand;
import command.EndOrderCommand;
import command.FindDelivererCommand;
import command.LoginCommand;
import command.LogoutCommand;
import command.OffDutyCommand;
import command.OnDutyCommand;
import command.RegisterCourierCommand;
import command.RegisterCustomerCommand;
import command.RegisterRestaurantCommand;
import command.RemoveFromSpecialOfferCommand;
import command.RunTestCommand;
import command.SaveMealCommand;
import command.SetDeliveryPolicyCommand;
import command.SetProfitPolicyCommand;
import command.SetSpecialOfferCommand;
import command.ShowCourierDeliveriesCommand;
import command.ShowCustomersCommand;
import command.ShowMealCommand;
import command.ShowMenuItemCommand;
import command.ShowRestaurantTopCommand;
import command.ShowTotalProfitCommand;
import command.ShowTotalProfitInAPeriodCommand;
import myFoodora.MyFoodora;
import utilites.Coordinate;

/**
 * @author Dingo
 * Receive parameter and execute the correspond command
 */
public class CLInvoker {
	MyFoodora myFoodora;
	
	public CLInvoker(MyFoodora myFoodora) {
		super();
		this.myFoodora = myFoodora;
	}

	public CommandResult invalidInput(){
		CommandResult result = new CommandResult();
		result.setResult(false);
		result.setMessage("Parameter input format is invalid");
		return result;
	}
	public CommandResult login(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		LoginCommand c = new LoginCommand();
		c.setMyFoodora(myFoodora);
		c.setUsername(args[0]);
		c.setPassword(args[1]);
		return c.execute();
	}
	
	public CommandResult logout(String[] args) throws Exception{
		if(args.length != 0)
			return invalidInput();
		LogoutCommand c = new LogoutCommand();
		return c.execute();
		
	}
	public CommandResult registerRestaurant(String[] args) throws Exception{
		if(args.length != 4)
			return invalidInput();
		RegisterRestaurantCommand c= new RegisterRestaurantCommand();
		c.setName(args[0]);
		c.setAddress(Coordinate.stringToCoordinate(args[1]));
		c.setUsername(args[2]);
		c.setPassword(args[3]);
		return c.execute();
	}
	public CommandResult registerCustomer(String[] args) throws Exception{
		if(args.length != 5)
			return invalidInput();
		RegisterCustomerCommand c= new RegisterCustomerCommand();
		c.setFirstName(args[0]);
		c.setLastName(args[1]);
		c.setUsername(args[2]);
		c.setAddress(Coordinate.stringToCoordinate(args[3]));
		c.setPassword(args[4]);
		return c.execute();
	}
	public CommandResult registerCourier(String[] args) throws Exception{
		if(args.length != 5)
			return invalidInput();
		RegisterCourierCommand c= new RegisterCourierCommand();
		c.setFirstName(args[0]);
		c.setLastName(args[1]);
		c.setUsername(args[2]);
		c.setPosition(Coordinate.stringToCoordinate(args[3]));
		c.setPassword(args[4]);
		return c.execute();
	}
	public CommandResult addDishRestauarantMenu(String[] args) throws Exception{
		if(args.length != 4)
			return invalidInput();
		AddDishRestaurantMenuCommand c = new AddDishRestaurantMenuCommand();
		c.setDishName(args[0]);
		c.setDishCategory(args[1]);
		c.setFoodCategory(args[2]);
		c.setUnitPrice(Double.parseDouble(args[3]));
		return c.execute();
	}
	public CommandResult createMeal(String[] args) throws Exception{
		if(args.length != 3)
			return invalidInput();
		CreateMealCommand c = new CreateMealCommand();
		c.setMealName(args[0]);
		c.setMealCategory(args[1]);
		c.setFoodType(args[2]);
		return c.execute();
	}
	public CommandResult addDish2Meal(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		AddDish2MealCommand c = new AddDish2MealCommand();
		c.setDishName(args[0]);
		c.setMealName(args[1]);
		return c.execute();
	}
	public CommandResult showMeal(String[] args){
		if(args.length != 1)
			return invalidInput();
		ShowMealCommand c = new ShowMealCommand();
		c.setMealName(args[0]);
		return c.execute();
	}
	public CommandResult saveMeal(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		SaveMealCommand c = new SaveMealCommand();
		c.setMealName(args[0]);
		return c.execute();
		
	}
	public CommandResult setSpecialOffer(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		SetSpecialOfferCommand c = new SetSpecialOfferCommand();
		c.setMealName(args[0]);
		return c.execute();
	}
	public CommandResult removeFromSpecialOffer(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		RemoveFromSpecialOfferCommand c = new RemoveFromSpecialOfferCommand();
		c.setMealName(args[0]);
		return c.execute();
	}
	public CommandResult createOrder(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		CreateOrderCommand c = new CreateOrderCommand();
		c.setRestaurantName(args[0]);
		c.setOrderName(args[1]);
		c.setMyFoodora(myFoodora);
		return c.execute();
	}
	public CommandResult addItem2Order(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		AddItem2OrderCommand c = new AddItem2OrderCommand();
		c.setOrderName(args[0]);
		c.setItemName(args[1]);
		return c.execute();
	}
	public CommandResult endOrder(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		Date d = (new SimpleDateFormat("yyyy-MM-dd HH:mm")).parse(args[1]);
		EndOrderCommand c = new EndOrderCommand();
		c.setOrderName(args[0]);
		c.setDate(d);
		c.setMyFoodora(myFoodora);
		return c.execute();
	}
	
	// don't need username
	public CommandResult onDuty(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		OnDutyCommand c = new OnDutyCommand();
		c.setUsername(args[0]);
		return c.execute();
	}
	
	// don't need username
	public CommandResult offDuty(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		OffDutyCommand c = new OffDutyCommand();
		c.setUsername(args[0]);
		return c.execute();
	}
	
	public CommandResult findDeliverer(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		FindDelivererCommand c = new FindDelivererCommand();
		c.setOrderName(args[0]);
		c.setMyFoodora(myFoodora);
		return c.execute();
	}
	
	public CommandResult setDeliveryPolicy(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		SetDeliveryPolicyCommand c = new SetDeliveryPolicyCommand();
		c.setDelPolicyName(args[0]);
		return c.execute();
	}
	public CommandResult setProfitPolicy(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		SetProfitPolicyCommand c = new SetProfitPolicyCommand();
		c.setProfitPolicyName(args[0]);
		return c.execute();
	}
	public CommandResult associateCard(String[] args) throws Exception{
		if(args.length != 2)
			return invalidInput();
		AssociateCardCommand c = new AssociateCardCommand();
		c.setUserName(args[0]);
		c.setCardType(args[1]);
		c.setMyFoodora(myFoodora);
		return c.execute();
	}
	public CommandResult showCourierDeliveries(String[] args) throws Exception{
		if(args.length != 0)
			return invalidInput();
		ShowCourierDeliveriesCommand c = new ShowCourierDeliveriesCommand();
		return c.execute();
	}
	public CommandResult showRestaurantTop(String[] args) throws Exception{
		if(args.length != 0)
			return invalidInput();
		ShowRestaurantTopCommand c = new ShowRestaurantTopCommand();
		return c.execute();
	}
	public CommandResult showCustomers(String[] args) throws Exception{
		if(args.length != 0)
			return invalidInput();
		ShowCustomersCommand c = new ShowCustomersCommand();
		return c.execute();
	}
	public CommandResult showMenuItem(String[] args) throws Exception{
		if(args.length != 1)
			return invalidInput();
		ShowMenuItemCommand c = new ShowMenuItemCommand();
		c.setRestaurantName(args[0]);
		return c.execute();
	}
	public CommandResult showTotalProfit(String[] args) throws Exception{
		if(args.length != 0)
			return invalidInput();
		ShowTotalProfitCommand c = new ShowTotalProfitCommand();
		return c.execute();
	}
	public CommandResult showTotalProfit(String[] args){
		if(args.length != 2)
			return invalidInput();
		Date d1 = (new SimpleDateFormat("yyyy-MM-dd HH:mm")).parse(args[0]);
		Date d2 = (new SimpleDateFormat("yyyy-MM-dd HH:mm")).parse(args[1]);
		ShowTotalProfitInAPeriodCommand c = new ShowTotalProfitInAPeriodCommand();
		c.setStartDate(d1);
		c.setEndDate(d2);
		return c.execute();
	}
	public CommandResult runTest(String[] args){
		if(args.length != 1)
			return invalidInput();
		RunTestCommand c = new RunTestCommand();
		c.setTestScenarioFile(args[0]);
		return c.execute();
	}
	public CommandResult help(String[] args){
		if(args.length != 5)
			return invalidInput();
	}
}
